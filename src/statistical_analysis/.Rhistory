+ log_num_commit_total
+ age
+ log_num_committer_total
+ is_org
# + log_num_issue_total
# + log_num_closed_total
####+ log_num_external_total
# + log_num_pr_total
+ log_size_GH
+ log_num_download
+ log_reverse_dependency_count
,family = "binomial",
data = d_has_enough_funding)
vif(m3)
# Do logistic regression to predict has_enough_funding with explanatory variables
m3 = glm(has_enough_funding ~
log_num_star_GH
####+ log_num_commit_total
+ age
+ log_num_committer_total
+ is_org
# + log_num_issue_total
# + log_num_closed_total
####+ log_num_external_total
# + log_num_pr_total
+ log_size_GH
+ log_num_download
+ log_reverse_dependency_count
,family = "binomial",
data = d_has_enough_funding)
vif(m3)
# Do logistic regression to predict has_enough_funding with explanatory variables
m3 = glm(has_enough_funding ~
log_num_star_GH
+ log_num_commit_total
+ age
+ log_num_committer_total
+ is_org
# + log_num_issue_total
# + log_num_closed_total
####+ log_num_external_total
# + log_num_pr_total
+ log_size_GH
+ log_num_download
####+ log_reverse_dependency_count
,family = "binomial",
data = d_has_enough_funding)
vif(m3)
####
# Do logistic regression to predict has_enough_funding with explanatory variables
m3 = glm(has_enough_funding ~
log_num_star_GH
####+ log_num_commit_total
+ age
+ log_num_committer_total
+ is_org
# + log_num_issue_total
# + log_num_closed_total
####+ log_num_external_total
# + log_num_pr_total
+ log_size_GH
+ log_num_download
####+ log_reverse_dependency_count
,family = "binomial",
data = d_has_enough_funding)
vif(m3)
summary(m3)
pR2(m3)
anova(m3)
d_has_no_funding$is_org = d_has_no_funding$project_type=="ORG"
# Do logistic regression to predict has_no_funding with explanatory variables
m5 = glm(has_no_funding ~
log_num_star_GH
+ log_num_commit_total
+ age
+ log_num_committer_total
+ is_org
# + log_num_issue_total
# + log_num_closed_total
+ log_num_external_total
# + log_num_pr_total
+ log_size_GH
+ log_num_download
+ log_reverse_dependency_count
,family = "binomial",
data = d_has_no_funding)
library(readr)
#install.packages("pscl")
library(pscl)
# install.packages("car")
library(car)
d_funding = read_csv("C:/Users/coverney/Desktop/REU-SE/Data/20190710_asking_cleaned.csv")
d_control = read_csv("C:/Users/coverney/Desktop/REU-SE/Data/20190710_random_control_10000_cleaned.csv")
names(d_funding) # same as d_control
# Make has_any_funding column in dataframes and set to true for all rows in d_funding and false for all rows in df_control
d_funding$has_any_funding = TRUE
d_control$has_any_funding = FALSE
# Merge the two dataframes
d <- rbind(d_funding, d_control)
nrow(d)
# Make has_known_funding column that is true if total earning is not 0
d$has_known_funding = FALSE
summary(d$has_known_funding)
d[!is.na(d$total_earning),]$has_known_funding = TRUE
summary(d$has_known_funding)
d_has_known_funding = subset(d, has_known_funding == TRUE | has_any_funding == FALSE)
# Make has_enough_funding column that is true if earning_last9months >= 9000
d$has_enough_funding = FALSE
summary(d$has_enough_funding)
d[(d$has_known_funding==TRUE) & (d$earning_last9months >= 9000),]$has_enough_funding = TRUE
summary(d$has_enough_funding)
d_has_enough_funding = subset(d, has_enough_funding == TRUE | has_any_funding == FALSE)
# Make has_no_funding column that is true if earning_last9months < 1000
d$has_no_funding = FALSE
summary(d$has_no_funding)
d[(d$has_known_funding==TRUE) & (d$earning_last9months < 1000),]$has_no_funding = TRUE
summary(d$has_no_funding)
d_has_no_funding = subset(d, has_no_funding == TRUE | has_any_funding == FALSE)
# Make has_some_funding column that is true if earning_last9months between 9000 and 1000
d$has_some_funding = FALSE
summary(d$has_some_funding)
d[(d$has_known_funding==TRUE) & (d$earning_last9months < 9000) & (d$earning_last9months >= 1000),]$has_some_funding = TRUE
summary(d$has_some_funding)
d_has_some_funding = subset(d, has_some_funding == TRUE | has_any_funding == FALSE)
# Do logistic regression to predict has_any_funding with explanatory variables
m0 = glm(has_any_funding ~
log_num_star_GH
+ log_num_commit
+ age
+ log_num_committer
+ is_org
# + log_num_issue_total
# + log_num_closed_total
+ log_num_external
# + log_num_pr_total
+ log_size_GH
+ log_num_download
+ log_reverse_dependency_count
,family = "binomial",
data = d)
# Make log columns
d_funding$log_num_star_GH = log(d_funding$num_star_GH+1)
d_control$log_num_star_GH = log(d_control$num_star_GH+1)
d_funding$log_num_commit_total = log(d_funding$num_commit_total+1)
d_control$log_num_commit_total = log(d_control$num_commit_total+1)
d_funding$log_num_committer_total = log(d_funding$num_committer_total+1)
d_control$log_num_committer_total = log(d_control$num_committer_total+1)
d_funding$log_num_issue_total = log(d_funding$num_issue_total+1)
d_control$log_num_issue_total = log(d_control$num_issue_total+1)
d_funding$log_num_closed_total = log(d_funding$num_closed_total+1)
d_control$log_num_closed_total = log(d_control$num_closed_total+1)
d_funding$log_num_external_total = log(d_funding$num_external_total+1)
d_control$log_num_external_total = log(d_control$num_external_total+1)
d_funding$log_num_pr_total = log(d_funding$num_pr_total+1)
d_control$log_num_pr_total = log(d_control$num_pr_total+1)
d_funding$log_size_GH = log(d_funding$size_GH+1)
d_control$log_size_GH = log(d_control$size_GH+1)
d_funding$log_num_download = log(d_funding$num_download+1)
d_control$log_num_download = log(d_control$num_download+1)
d_funding$log_reverse_dependency_count = log(d_funding$reverse_dependency_count+1)
d_control$log_reverse_dependency_count = log(d_control$reverse_dependency_count+1)
library(readr)
#install.packages("pscl")
library(pscl)
# install.packages("car")
library(car)
d_funding = read_csv("C:/Users/coverney/Desktop/REU-SE/Data/20190710_asking_cleaned.csv")
d_control = read_csv("C:/Users/coverney/Desktop/REU-SE/Data/20190710_random_control_10000_cleaned.csv")
names(d_funding) # same as d_control
# Make log columns
d_funding$log_num_star_GH = log(d_funding$num_star_GH+1)
d_control$log_num_star_GH = log(d_control$num_star_GH+1)
d_funding$log_num_commit_total = log(d_funding$num_commit_total+1)
d_control$log_num_commit_total = log(d_control$num_commit_total+1)
d_funding$log_num_committer_total = log(d_funding$num_committer_total+1)
d_control$log_num_committer_total = log(d_control$num_committer_total+1)
d_funding$log_num_issue_total = log(d_funding$num_issue_total+1)
d_control$log_num_issue_total = log(d_control$num_issue_total+1)
d_funding$log_num_closed_total = log(d_funding$num_closed_total+1)
d_control$log_num_closed_total = log(d_control$num_closed_total+1)
d_funding$log_num_external_total = log(d_funding$num_external_total+1)
d_control$log_num_external_total = log(d_control$num_external_total+1)
d_funding$log_num_pr_total = log(d_funding$num_pr_total+1)
d_control$log_num_pr_total = log(d_control$num_pr_total+1)
d_funding$log_size_GH = log(d_funding$size_GH+1)
d_control$log_size_GH = log(d_control$size_GH+1)
d_funding$log_num_download = log(d_funding$num_download+1)
d_control$log_num_download = log(d_control$num_download+1)
d_funding$log_reverse_dependency_count = log(d_funding$reverse_dependency_count+1)
d_control$log_reverse_dependency_count = log(d_control$reverse_dependency_count+1)
# Make has_any_funding column in dataframes and set to true for all rows in d_funding and false for all rows in df_control
d_funding$has_any_funding = TRUE
d_control$has_any_funding = FALSE
# Merge the two dataframes
d <- rbind(d_funding, d_control)
nrow(d)
# Make has_known_funding column that is true if total earning is not 0
d$has_known_funding = FALSE
summary(d$has_known_funding)
d[!is.na(d$total_earning),]$has_known_funding = TRUE
summary(d$has_known_funding)
d_has_known_funding = subset(d, has_known_funding == TRUE | has_any_funding == FALSE)
# Make has_enough_funding column that is true if earning_last9months >= 9000
d$has_enough_funding = FALSE
summary(d$has_enough_funding)
d[(d$has_known_funding==TRUE) & (d$earning_last9months >= 9000),]$has_enough_funding = TRUE
summary(d$has_enough_funding)
d_has_enough_funding = subset(d, has_enough_funding == TRUE | has_any_funding == FALSE)
# Make has_no_funding column that is true if earning_last9months < 1000
d$has_no_funding = FALSE
summary(d$has_no_funding)
d[(d$has_known_funding==TRUE) & (d$earning_last9months < 1000),]$has_no_funding = TRUE
summary(d$has_no_funding)
d_has_no_funding = subset(d, has_no_funding == TRUE | has_any_funding == FALSE)
# Make has_some_funding column that is true if earning_last9months between 9000 and 1000
d$has_some_funding = FALSE
summary(d$has_some_funding)
d[(d$has_known_funding==TRUE) & (d$earning_last9months < 9000) & (d$earning_last9months >= 1000),]$has_some_funding = TRUE
summary(d$has_some_funding)
d_has_some_funding = subset(d, has_some_funding == TRUE | has_any_funding == FALSE)
d$is_org = d$project_type=="ORG"
# Do logistic regression to predict has_any_funding with explanatory variables
m0 = glm(has_any_funding ~
log_num_star_GH
+ log_num_commit
+ age
+ log_num_committer
+ is_org
# + log_num_issue_total
# + log_num_closed_total
+ log_num_external
# + log_num_pr_total
+ log_size_GH
+ log_num_download
+ log_reverse_dependency_count
,family = "binomial",
data = d)
# Do logistic regression to predict has_any_funding with explanatory variables
m0 = glm(has_any_funding ~
log_num_star_GH
+ num_commit
+ age
+ num_committer
+ is_org
# + log_num_issue_total
# + log_num_closed_total
+ num_external
# + log_num_pr_total
+ log_size_GH
+ log_num_download
+ log_reverse_dependency_count
,family = "binomial",
data = d)
vif(m0)
summary(m0)
d_funding$log_num_external = log(d_funding$num_external+1)
d_control$log_num_external = log(d_control$num_external+1)
d_funding$log_num_commit = log(d_funding$num_commit+1)
d_control$log_num_commit = log(d_control$num_commit+1)
d_funding$log_num_committer = log(d_funding$num_committer+1)
d_control$log_num_committer = log(d_control$num_committer+1)
library(readr)
#install.packages("pscl")
library(pscl)
# install.packages("car")
library(car)
d_funding = read_csv("C:/Users/coverney/Desktop/REU-SE/Data/20190710_asking_cleaned.csv")
d_control = read_csv("C:/Users/coverney/Desktop/REU-SE/Data/20190710_random_control_10000_cleaned.csv")
names(d_funding) # same as d_control
# Make log columns
d_funding$log_num_star_GH = log(d_funding$num_star_GH+1)
d_control$log_num_star_GH = log(d_control$num_star_GH+1)
d_funding$log_num_commit_total = log(d_funding$num_commit_total+1)
d_control$log_num_commit_total = log(d_control$num_commit_total+1)
d_funding$log_num_committer_total = log(d_funding$num_committer_total+1)
d_control$log_num_committer_total = log(d_control$num_committer_total+1)
d_funding$log_num_commit = log(d_funding$num_commit+1)
d_control$log_num_commit = log(d_control$num_commit+1)
d_funding$log_num_committer = log(d_funding$num_committer+1)
d_control$log_num_committer = log(d_control$num_committer+1)
d_funding$log_num_issue_total = log(d_funding$num_issue_total+1)
d_control$log_num_issue_total = log(d_control$num_issue_total+1)
d_funding$log_num_closed_total = log(d_funding$num_closed_total+1)
d_control$log_num_closed_total = log(d_control$num_closed_total+1)
d_funding$log_num_external_total = log(d_funding$num_external_total+1)
d_control$log_num_external_total = log(d_control$num_external_total+1)
d_funding$log_num_external = log(d_funding$num_external+1)
d_control$log_num_external = log(d_control$num_external+1)
d_funding$log_num_pr_total = log(d_funding$num_pr_total+1)
d_control$log_num_pr_total = log(d_control$num_pr_total+1)
d_funding$log_size_GH = log(d_funding$size_GH+1)
d_control$log_size_GH = log(d_control$size_GH+1)
d_funding$log_num_download = log(d_funding$num_download+1)
d_control$log_num_download = log(d_control$num_download+1)
d_funding$log_reverse_dependency_count = log(d_funding$reverse_dependency_count+1)
d_control$log_reverse_dependency_count = log(d_control$reverse_dependency_count+1)
# Make has_any_funding column in dataframes and set to true for all rows in d_funding and false for all rows in df_control
d_funding$has_any_funding = TRUE
d_control$has_any_funding = FALSE
# Merge the two dataframes
d <- rbind(d_funding, d_control)
nrow(d)
# Make has_known_funding column that is true if total earning is not 0
d$has_known_funding = FALSE
summary(d$has_known_funding)
d[!is.na(d$total_earning),]$has_known_funding = TRUE
summary(d$has_known_funding)
d_has_known_funding = subset(d, has_known_funding == TRUE | has_any_funding == FALSE)
# Make has_enough_funding column that is true if earning_last9months >= 9000
d$has_enough_funding = FALSE
summary(d$has_enough_funding)
d[(d$has_known_funding==TRUE) & (d$earning_last9months >= 9000),]$has_enough_funding = TRUE
summary(d$has_enough_funding)
d_has_enough_funding = subset(d, has_enough_funding == TRUE | has_any_funding == FALSE)
# Make has_no_funding column that is true if earning_last9months < 1000
d$has_no_funding = FALSE
summary(d$has_no_funding)
d[(d$has_known_funding==TRUE) & (d$earning_last9months < 1000),]$has_no_funding = TRUE
summary(d$has_no_funding)
d_has_no_funding = subset(d, has_no_funding == TRUE | has_any_funding == FALSE)
# Make has_some_funding column that is true if earning_last9months between 9000 and 1000
d$has_some_funding = FALSE
summary(d$has_some_funding)
d[(d$has_known_funding==TRUE) & (d$earning_last9months < 9000) & (d$earning_last9months >= 1000),]$has_some_funding = TRUE
summary(d$has_some_funding)
d_has_some_funding = subset(d, has_some_funding == TRUE | has_any_funding == FALSE)
d$is_org = d$project_type=="ORG"
# Do logistic regression to predict has_any_funding with explanatory variables
m0 = glm(has_any_funding ~
log_num_star_GH
+ log_num_commit
+ age
+ log_num_committer
+ is_org
# + log_num_issue_total
# + log_num_closed_total
+ log_num_external
# + log_num_pr_total
+ log_size_GH
+ log_num_download
+ log_reverse_dependency_count
,family = "binomial",
data = d)
vif(m0)
summary(m0)
d$is_org = d$project_type=="ORG"
# Do logistic regression to predict has_any_funding with explanatory variables
m0 = glm(has_any_funding ~
log_num_star_GH
+ log_num_commit
+ age
+ log_num_committer
+ is_org
# + log_num_issue_total
# + log_num_closed_total
+ log_num_external
# + log_num_pr_total
+ log_size_GH
+ log_num_download
+ log_reverse_dependency_count
,family = "binomial",
data = d)
vif(m0)
summary(m0)
pR2(m0)
_
d$is_org = d$project_type=="ORG"
# Do logistic regression to predict has_any_funding with explanatory variables
m1 = glm(has_any_funding ~
log_num_star_GH
+ log_num_commit_total
+ age
+ log_num_committer_total
+ is_org
# + log_num_issue_total
# + log_num_closed_total
+ log_num_external_total
# + log_num_pr_total
+ log_size_GH
+ log_num_download
+ log_reverse_dependency_count
,family = "binomial",
data = d)
vif(m1)
summary(m1)
library(readr)
#install.packages("pscl")
library(pscl)
# install.packages("car")
library(car)
d_funding = read_csv("C:/Users/coverney/Desktop/REU-SE/Data/20190710_asking_cleaned.csv")
d_control = read_csv("C:/Users/coverney/Desktop/REU-SE/Data/20190710_random_control_10000_cleaned.csv")
names(d_funding) # same as d_control
# Make log columns
d_funding$log_num_star_GH = log(d_funding$num_star_GH+1)
d_control$log_num_star_GH = log(d_control$num_star_GH+1)
d_funding$log_num_commit_total = log(d_funding$num_commit_total+1)
d_control$log_num_commit_total = log(d_control$num_commit_total+1)
d_funding$log_num_committer_total = log(d_funding$num_committer_total+1)
d_control$log_num_committer_total = log(d_control$num_committer_total+1)
d_funding$log_num_commit = log(d_funding$num_commit+1)
d_control$log_num_commit = log(d_control$num_commit+1)
d_funding$log_num_committer = log(d_funding$num_committer+1)
d_control$log_num_committer = log(d_control$num_committer+1)
d_funding$log_num_issue_total = log(d_funding$num_issue_total+1)
d_control$log_num_issue_total = log(d_control$num_issue_total+1)
d_funding$log_num_closed_total = log(d_funding$num_closed_total+1)
d_control$log_num_closed_total = log(d_control$num_closed_total+1)
d_funding$log_num_external_total = log(d_funding$num_external_total+1)
d_control$log_num_external_total = log(d_control$num_external_total+1)
d_funding$log_num_external = log(d_funding$num_external+1)
d_control$log_num_external = log(d_control$num_external+1)
d_funding$log_num_pr_total = log(d_funding$num_pr_total+1)
d_control$log_num_pr_total = log(d_control$num_pr_total+1)
d_funding$log_size_GH = log(d_funding$size_GH+1)
d_control$log_size_GH = log(d_control$size_GH+1)
d_funding$log_num_download = log(d_funding$num_download+1)
d_control$log_num_download = log(d_control$num_download+1)
d_funding$log_reverse_dependency_count = log(d_funding$reverse_dependency_count+1)
d_control$log_reverse_dependency_count = log(d_control$reverse_dependency_count+1)
# Make has_any_funding column in dataframes and set to true for all rows in d_funding and false for all rows in df_control
d_funding$has_any_funding = TRUE
d_control$has_any_funding = FALSE
# Merge the two dataframes
d <- rbind(d_funding, d_control)
nrow(d)
# Make has_known_funding column that is true if total earning is not 0
d$has_known_funding = FALSE
summary(d$has_known_funding)
d[!is.na(d$total_earning),]$has_known_funding = TRUE
summary(d$has_known_funding)
d_has_known_funding = subset(d, has_known_funding == TRUE | has_any_funding == FALSE)
# Make has_enough_funding column that is true if earning_last9months >= 9000
d$has_enough_funding = FALSE
summary(d$has_enough_funding)
d[(d$has_known_funding==TRUE) & (d$earning_last9months >= 9000),]$has_enough_funding = TRUE
summary(d$has_enough_funding)
d_has_enough_funding = subset(d, has_enough_funding == TRUE | has_any_funding == FALSE)
# Make has_no_funding column that is true if earning_last9months < 1000
d$has_no_funding = FALSE
summary(d$has_no_funding)
d[(d$has_known_funding==TRUE) & (d$earning_last9months < 1000),]$has_no_funding = TRUE
summary(d$has_no_funding)
d_has_no_funding = subset(d, has_no_funding == TRUE | has_any_funding == FALSE)
# Make has_some_funding column that is true if earning_last9months between 9000 and 1000
d$has_some_funding = FALSE
summary(d$has_some_funding)
d[(d$has_known_funding==TRUE) & (d$earning_last9months < 9000) & (d$earning_last9months >= 1000),]$has_some_funding = TRUE
summary(d$has_some_funding)
d_has_some_funding = subset(d, has_some_funding == TRUE | has_any_funding == FALSE)
d$is_org = d$project_type=="ORG"
# Do logistic regression to predict has_any_funding with explanatory variables
m0 = glm(has_any_funding ~
log_num_star_GH
+ log_num_commit
+ age
+ log_num_committer
+ is_org
# + log_num_issue_total
# + log_num_closed_total
+ log_num_external
# + log_num_pr_total
+ log_size_GH
+ log_num_download
+ log_reverse_dependency_count
,family = "binomial",
data = d)
vif(m0)
summary(m0)
d$is_org = d$project_type=="ORG"
# Do logistic regression to predict has_any_funding with explanatory variables
m1 = glm(has_any_funding ~
log_num_star_GH
+ log_num_commit_total
+ age
+ log_num_committer_total
+ is_org
# + log_num_issue_total
# + log_num_closed_total
+ log_num_external_total
# + log_num_pr_total
+ log_size_GH
+ log_num_download
+ log_reverse_dependency_count
,family = "binomial",
data = d)
vif(m1)
summary(m1)
anova(m0)
d$is_org = d$project_type=="ORG"
# Do logistic regression to predict has_any_funding with explanatory variables
m1 = glm(has_any_funding ~
log_num_star_GH
+ log_num_commit_total
+ age
+ log_num_committer_total
+ is_org
# + log_num_issue_total
# + log_num_closed_total
+ log_num_external_total
# + log_num_pr_total
+ log_size_GH
+ log_num_download
+ log_reverse_dependency_count
,family = "binomial",
data = d)
vif(m1)
summary(m1)
pR2(m1) # McFadden R-squared
anova(m1)
setwd("C:/Users/coverney/Documents/GitHub/oss-donations/src/statistical_analysis")
source('make.R')
